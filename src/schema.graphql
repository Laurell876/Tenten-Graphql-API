const { gql } = require("apollo-server-express");


const typeDefs = gql`
  type User {
    tokenVersion: Int!
    _id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String
    defaultParish: String
    image: String
    createdListings: [Listing]
    favoriteListings: [Listing]
    reviews: [Review]
    messagesSent: [Message]
    messagesReceived: [Message]
    chats: [Chat]
  }

  type Listing {
    createdAt: String!
    _id:ID!
    title: String!
    bedrooms: Int!
    bathrooms: Int!
    address: String!
    city:String!
    parish:String!
    size:Int!
    description:String
    rent:Int!
    owner: User!
    image:String
    rating: Int!
    featured: Boolean!
    allRatings: [Rating]
    reviews:[Review]
  }

  type Rating {
    userId: ID
    userRating: Int
  }

  type Review {
    _id: ID!
    user: User!
    listing:Listing!
    review:String!
  }

  
  type Message {
    _id:ID!
    sender: User!
    receiver: User!
    createdAt: String!
    text: String!
    chat: Chat!
  }

  type Chat {
    _id:ID!
    userOne: User!,
    userTwo: User!
    messages: [Message]
    lastMessage: Message
  }

  type AuthData {
    accessToken:String!
    user: User!
  }

  input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  }

  input UpdateUserInput{
      firstName: String
      lastName: String
      email: String
      password: String
  }

  input LoginInput {
    email:String!, 
    password:String!
  }


  input ListingInput {
    title: String!
    bedrooms:Int!
    bathrooms:Int!
    address:String!
    city:String!
    parish:String!
    size:Int!
    description:String
    rent: Int!
    rating: Int
    featured: Boolean
  }

  input ListingUpdateInput {
    id:ID!
    title: String
    bedrooms:Int
    bathrooms:Int
    address:String
    city:String
    parish:String
    size:Int
    description:String
    rent: Int
    rating: Int
    featured: Boolean
  }

    type File {
    id: ID!
    filename: String!
    mimetype: String!
    path: String!
  }



  input CreateMessageInput {
    text:String!, chat:ID!
  }


  type Mutation {
    signUp(data: UserInput!): AuthData!
    createListing(data: ListingInput!, file:Upload) : Listing!
    updateListing(data: ListingUpdateInput!, file:Upload): Listing!
    removeListing(id: ID!): Listing!
    addUserImage(file:Upload!) : String!
    removeUserImage : String!,
    addFavorite(id: ID!) : Listing!
    removeFavorite(id: ID!): Listing!
    rateListing(id: ID!, value: Int!) : Rating!
    addReview(listingId: ID!, review: String!) : Review!
    removeReview(id:ID!) : Review!
    createMessage(data: CreateMessageInput!) : Message!
    startChat(userTwo: ID!) : Chat!





    registerV2(data: UserInput!) : AuthData!
    loginV2(data: LoginInput!) : AuthData!
    revokeRefreshTokensForUser(userId: String!): Boolean
    logout : Boolean!

    uploadFile(file: Upload!): Boolean

    updateUser(data: UpdateUserInput, file: Upload): User!
  }

  type Query {
    users(id: ID): [User],
    login(data: LoginInput!): AuthData!
    listings(id:ID) : [Listing] 
    me: User!
    reviews(listingId: ID) : [Review]
    chats: [Chat!]!
    messages(chatId: ID): [Message!]!
  }


  type Subscription {
    newMessage: Message!

  }
`

module.exports = typeDefs